#!/usr/bin/env python
# encoding: UTF-8
#
# Script to select current version for a given soft (python, ruby or java).

import os
import re
import sys
import glob
import getopt


# fix input in Python 2 and 3
try:
    input = raw_input
except NameError:
    pass


class Version(object):

    HELP = '''version [-h] software
Select software version in a menu:
-h        To print this help screen.
software  Software version to choose.'''
    SELECTED = ' *'

    def __init__(self, soft):
        self.soft = soft

    def soft_root(self):
        return '/opt/%s' % self.soft

    def soft_paths(self):
        return sorted(glob.glob(self.soft_root()+'/[0-9].[0-9]*'))

    def get_versions(self):
        return [v[len(self.soft_root())+1:] for v in self.soft_paths()]

    def get_current_version(self):
        path = os.path.realpath("%s/current" % self.soft_root())
        return path[path.rindex(os.path.sep)+1:]

    def set_version(self, index):
        old_dir = "%s/current" % self.soft_root()
        if index == -1:
            print("Selecting system %s version" % self.soft)
            if os.path.exists(old_dir):
                os.system("sudo rm %s" % old_dir)
        else:
            print("Selecting %s version '%s'" %
                  (self.soft, self.get_versions()[index]))
            directory = self.soft_paths()[index]
            if os.path.exists(old_dir):
                os.system("sudo rm %s" % old_dir)
            os.system("sudo ln -sf %s %s" % (directory, old_dir))

    def ask_version(self):
        # print version list
        print('Please choose a version:')
        index = 1
        current_version = self.get_current_version()
        if current_version == 'current':
            selected = self.SELECTED
        else:
            selected = ''
        print("0: System"+selected)
        for version in self.soft_paths():
            number = version[len(self.soft_root())+1:]
            if number == current_version:
                selected = self.SELECTED
            else:
                selected = ''
            print(str(index)+': '+str(number)+selected)
            index += 1
        # ask for the version
        chosen = None
        maximum = len(self.soft_paths())
        while not chosen:
            try:
                choice = input()
            except KeyboardInterrupt:
                print("\nUser abort!")
                sys.exit(0)
            if re.match('\d+', choice) and int(choice) <= maximum and \
                    int(choice) >= 0:
                index = int(choice) - 1
                chosen = True
            elif choice == '':
                print("Keeping current")
                sys.exit(0)
            else:
                print("Bad version, please choose a number between 0 and %s" %
                      str(maximum))
        # return index in version table
        return index

    @staticmethod
    def run():
        try:
            opts, args = getopt.getopt(sys.argv[1:], 'h', ['help'])
        except getopt.GetoptError as e:
            print('Error parsing command line: %s' % e)
            print(Version.HELP)
            sys.exit(1)
        for o, a in opts:
            if o in ('-h', '--help'):
                print(Version.HELP)
                sys.exit(0)
            else:
                print("Error parsing command line: Unhandled option '%s'" % o)
                print(Version.HELP)
                sys.exit(2)
        if len(args) != 1:
            print("Error parsing command line: You must pass software")
            print(Version.HELP)
            sys.exit(1)
        soft = args[0]
        version = Version(soft)
        version.set_version(version.ask_version())


if __name__ == '__main__':
    Version.run()
