#!/bin/bash

set -e

# help page
usage() {
    cat << EOF
usage: build-python [-h] [-t] [-d] [-p] version
Build and install a given version of Python on Linux or MacOSX:
-h       Print this help page.
-a       Install dependencies with apt-get.
-t       Run tests (that might take time on some platforms).
-d       Build documentation (installed in doc directory).
-p       Don't install PIP (and easy_install).
-v       Don't install Virtualenv.
version  The version to build and install.

Following libraries (debian or fink) might be useful:
- tetex-nox and latex2html to generate documentation (for 2.6 versions).
- libreadline-dev to enable completion and line edition in interpreter.
- libssl-dev to enable HTTPS.
- libzip-dev, libtar-dev, libbz2-dev, zlib1g-dev: to enable ZIP and TAR support.
- libmysqld-dev, libmysqlclient-dev and python-dev: to install MySQL driver.
- libsqlite3-dev: to enable sqlite3 support.
EOF
}

# install dependencies with apt-get
dependencies() {
    sudo apt-get update && sudo apt-get install libreadline-dev libssl-dev libzip-dev libtar-dev libbz2-dev zlib1g-dev libmysqld-dev libmysqlclient-dev python-dev libsqlite3-dev
}

# read command line arguments
TEST=''
DOCS=''
PIP=1
VENV=1
while getopts “hatdp” OPTION
do
    case $OPTION in
        h)
            usage
            exit
            ;;
        a)
            dependencies
            exit
            ;;
        t)
            TEST=1
            ;;
        d)
            DOCS=1
            ;;
        p)
            PIP=0
            ;;
        v)
            VENV=0
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done

# remove the switches we parsed above
shift `expr $OPTIND - 1`

# get version on command line
if [[ $# != 1 ]]
then
    echo "Missing version!"
    usage
    exit 1
else
    VERSION=$1
fi

# extract major and minor part of version
MAJOR=`echo $VERSION | cut -d. -f1`
MINOR=`echo $VERSION | cut -d. -f2`
DEBUG=`echo $VERSION | cut -d. -f3`

# decide target and destination for built documentation
if [ $MAJOR -gt 2 ];
then
  TARGET_DOC="html"
  BUILD_DOC="build/html"
else
  if [ $MINOR -gt 5 ];
  then
    TARGET_DOC="html"
    BUILD_DOC="build/html"
  else
    TARGET_DOC=""
    BUILD_DOC="html"
  fi
fi

INSTALL_DIR=/opt/python/$VERSION

# check that target install directory doesn't already exists
if [ -d $INSTALL_DIR ]
then
    echo "Target install directory '${INSTALL_DIR}' already exists"
    exit 1
fi

ARCHIVE=Python-$VERSION.tgz

echo "Downloading Python Archive..."
wget https://www.python.org/ftp/python/$VERSION/$ARCHIVE

echo "Building Python..."
tar zxf $ARCHIVE
cd Python-$VERSION
# compilation flags on MacOSX
if [ "`uname`" = "Darwin" ]; then
    export LDFLAGS=-L/opt/local/lib
    export CPPFLAGS=-I/opt/local/include
fi
# compilation flags on Linux 11.10 (arch libs)
if [ "`uname`" = "Linux" ]; then
    export arch=$(dpkg-architecture -qDEB_HOST_MULTIARCH)
    export LDFLAGS="-L/usr/lib/$arch -L/lib/$arch"
    export CFLAGS="-I/usr/include/$arch"
    export CPPFLAGS="-I/usr/include/$arch"
fi

./configure --prefix=$INSTALL_DIR
make
if [[ $TEST ]]
then
    make test
fi
if [[ $DOCS ]]
then
    cd Doc
    make $TARGET_DOC
    cd ..
fi

echo "Installing Python..."
sudo make install
if [[ $DOCS ]]
then
    sudo cp -r Doc/$BUILD_DOC $INSTALL_DIR/doc
fi

# make a link from python3 to python executable
if [ $MAJOR -gt 2 ];
then
  if [ -f $INSTALL_DIR/bin/python$MAJOR ]
  then
    sudo ln -sf $INSTALL_DIR/bin/python$MAJOR $INSTALL_DIR/bin/python 
  else
    sudo ln -sf $INSTALL_DIR/bin/python$MAJOR.$MINOR $INSTALL_DIR/bin/python
  fi
fi

echo "Cleaning archive..."
cd ..
sudo rm -rf Python-$VERSION
rm $ARCHIVE

function install_pip
{
    wget https://bootstrap.pypa.io/get-pip.py
    sudo $INSTALL_DIR/bin/python get-pip.py
    rm get-pip.py
}

if [[ $PIP ]]
then
    echo "Installing PIP..."
    sudo $INSTALL_DIR/bin/python -m ensurepip || install_pip
fi

if [[ $VENV ]]
then
    echo "Installing Virtualenv..."
    sudo $INSTALL_DIR/bin/pip install virtualenv
fi
